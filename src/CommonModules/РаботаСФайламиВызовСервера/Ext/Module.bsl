
// + #s3 Иванов А.Б. 12.01.2021
&ИзменениеИКонтроль("ПолучитьДвоичныеДанныеВерсииФайла")
Функция s3_ПолучитьДвоичныеДанныеВерсииФайла(ВерсияСсылка)
	
	ДвоичныеДанные = Неопределено;
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВерсияСсылка,
		"ТипХраненияФайла, Том, ПутьКФайлу, Владелец, ПолноеНаименование, Расширение");
	
	Если РеквизитыВерсии.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ РеквизитыВерсии.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(РеквизитыВерсии.Том) + РеквизитыВерсии.ПутьКФайлу; 
			Попытка
				#Удаление
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				#КонецУдаления
				#Вставка 
				// + #s3 Иванов А.Б. 12.01.2021
				ДвоичныеДанные = s3_API.ПолучитьДвоичныеДанныеФайла(РеквизитыВерсии.Том, ПолныйПуть);			                                                                        
				// - #s3 Иванов А.Б. 12.01.2021				
				#КонецВставки
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), РеквизитыВерсии.Владелец);
				ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, РеквизитыВерсии.Владелец, СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					РеквизитыВерсии.ПолноеНаименование + "." + РеквизитыВерсии.Расширение);
					
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
	КонецЕсли;
	
	ЗаписатьОбращениеКВерсииФайла(ВерсияСсылка);
	
	Возврат ДвоичныеДанные;

КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
// Обновляет или создает версию Файла и возвращает ссылку на обновленную версию (или Ложь, если файл бинарно не
// изменен).
//
// Параметры:
//   ФайлСсылка     - СправочникСсылка.Файлы        - файл, для которого создается новая версия.
//   СведенияОФайле - Структура                     - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме
//                                                    "ФайлСВерсией".
//   ВерсияСсылка   - СправочникСсылка.ВерсииФайлов - версия файла, которую надо обновить.
//   УникальныйИдентификаторФормы                   - УникальныйИдентификатор - уникальный идентификатор формы, 
//                                                    в контексте которой выполняется операция.
//   ДанныеДляВосстановленияФайловВТоме - Массив    - данные для восстановления файлов в томе в случае отката транзакции
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная или измененная версия; Неопределено, если файл бинарно не был изменен.
//
&ИзменениеИКонтроль("ОбновитьВерсиюФайла")
Функция s3_ОбновитьВерсиюФайла(ФайлСсылка, 
	СведенияОФайле, 
	ВерсияСсылка, 
	УникальныйИдентификаторФормы, 
	НужноЗановоРаспознатьВерсию, 
	ДанныеДляВосстановленияФайловВТоме, 
	ЭтоШифрование)
	
	Перем СсылкаНаТом;
	ХранилищеФайла = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
	СписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
	РасширениеФайла = СведенияОФайле.РасширениеБезТочки;
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		ВызватьИсключение
			   СтрШаблон(
				 НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				 РасширениеФайла);
	КонецЕсли;
	
	ЗарегистрироватьИзменениеФайла(ФайлСсылка);
	
	ТекущаяВерсияРазмер = 0;
	ДвоичныеДанные = Неопределено;
	ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ТекущаяВерсияТом = Неопределено;
	ТекущаяВерсияПутьКФайлу = Неопределено;
	
	ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	
	Если ВерсияСсылка <> Неопределено Тогда
		ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	Иначе
		ВерсияСсылкаДляСравненияРазмера = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	
	КодировкаПредВерсии = ПолучитьКодировкуВерсииФайла(ВерсияСсылкаДляСравненияРазмера);
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылкаДляСравненияРазмера, 
		"Размер, ТипХраненияФайла, Том, ПутьКФайлу");
	ТекущаяВерсияРазмер = СтруктураРеквизитов.Размер;
	ТекущаяВерсияТипХраненияФайла = СтруктураРеквизитов.ТипХраненияФайла;
	ТекущаяВерсияТом = СтруктураРеквизитов.Том;
	ТекущаяВерсияПутьКФайлу = СтруктураРеквизитов.ПутьКФайлу;
	
	Если СведенияОФайле.Размер = ТекущаяВерсияРазмер Тогда
		ДвоичныеДанныеПредыдущейВерсии = Неопределено;
		
		Если ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ ТекущаяВерсияТом.Пустая() Тогда
				ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ТекущаяВерсияТом) + ТекущаяВерсияПутьКФайлу; 
				#Удаление
				ДвоичныеДанныеПредыдущейВерсии = Новый ДвоичныеДанные(ПолныйПуть);
				#КонецУдаления
				#Вставка 
				// + #s3 Иванов А.Б. 12.01.2021
				ДвоичныеДанныеПредыдущейВерсии = s3_API.ПолучитьДвоичныеДанныеФайла(ТекущаяВерсияТом, ПолныйПуть);
				// - #s3 Иванов А.Б. 12.01.2021				
				#КонецВставки
			КонецЕсли;
		Иначе
			ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылкаДляСравненияРазмера);
			ДвоичныеДанныеПредыдущейВерсии = ХранилищеФайла.Получить();
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
		
		Если ДвоичныеДанныеПредыдущейВерсии = ДвоичныеДанные Тогда
			
			Если ЗначениеЗаполнено(СведенияОФайле.Комментарий) Тогда
				
				ЗаблокироватьДанныеДляРедактирования(ВерсияСсылкаДляСравненияРазмера, , УникальныйИдентификаторФормы);
				Версия = ВерсияСсылкаДляСравненияРазмера.ПолучитьОбъект();
				
				Если ЗначениеЗаполнено(Версия.Комментарий) Тогда
					Версия.Комментарий = Версия.Комментарий + Символы.ВК;
				КонецЕсли;	
				Версия.Комментарий = Версия.Комментарий + СведенияОФайле.Комментарий;
				
				Версия.Записать();
				РазблокироватьДанныеДляРедактирования(ВерсияСсылкаДляСравненияРазмера, УникальныйИдентификаторФормы);		
				
				Возврат ВерсияСсылкаДляСравненияРазмера.Ссылка;
				
			КонецЕсли;	
			
			Возврат Неопределено; // Файл бинарно не изменен
			
		КонецЕсли;
	КонецЕсли;
	
	СтарыйТипХранения = Неопределено;
	ВерсияЗаблокирована = Ложь;
	Версия = Неопределено;
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла");
	
	Если СведенияОФайле.ХранитьВерсии Тогда
		Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
		Версия.РодительскаяВерсия = ФайлСсылка.ТекущаяВерсия;
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ФайлСсылка) + 1;
		
		Если Не ЗначениеЗаполнено(ФайлСсылка.СтратегияРаспознавания) 
			Или ФайлСсылка.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.НеРаспознавать Тогда
			
			Версия.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеНужноРаспознавать;
			
		Иначе
			
			ИМОВладельца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВладелецФайла));
			Версия.СтатусРаспознаванияТекста = 
				РаботаСФайламиВызовСервера.СтатусРаспознаванияПоУмолчаниюДляФайловВладельца(ИМОВладельца);
			
		КонецЕсли;
		
	Иначе
		
		Если ВерсияСсылка = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(ФайлСсылка.ТекущаяВерсия, , УникальныйИдентификаторФормы);
			Версия = ФайлСсылка.ТекущаяВерсия.ПолучитьОбъект();
		Иначе
			ЗаблокироватьДанныеДляРедактирования(ВерсияСсылка, , УникальныйИдентификаторФормы);
			Версия = ВерсияСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ВерсияЗаблокирована = Истина;
		
		Если Версия.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.Распознано Тогда
			
			ИМОВладельца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВладелецФайла));
			Версия.СтатусРаспознаванияТекста = 
				РаботаСФайламиВызовСервера.СтатусРаспознаванияПоУмолчаниюДляФайловВладельца(ИМОВладельца);
			
			НужноЗановоРаспознатьВерсию = Истина;
		КонецЕсли;
		
		// удалим файл с диска - мы заместим его новым
		Если Версия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ Версия.Том.Пустая() Тогда
				
				Если ЭтоШифрование = Ложь Тогда
					РегистрыСведений.ФайлыКУдалению.ЗаписатьФайл(Версия.Том, Версия.ПутьКФайлу, 
						"ОбновитьВерсиюФайла", Версия.Ссылка);
				Иначе	
					
					// если зашифровать или расшифровать - сразу удаляем в томе
					ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
					Попытка
						ФайлНаДиске = Новый Файл(ПолныйПуть);
						ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
						
						УдалитьФайлы(ПолныйПуть);
						
						ПутьСПодкаталогом = ФайлНаДиске.Путь;
						МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
						Если МассивФайловВКаталоге.Количество() = 0 Тогда
							УдалитьФайлы(ПутьСПодкаталогом);
						КонецЕсли;
						
					Исключение  // глотаем исключение
					КонецПопытки;
					
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Версия.Владелец = ФайлСсылка.Ссылка;
	Версия.Автор = Пользователи.ТекущийПользователь();
	Версия.ДатаМодификацииУниверсальная = СведенияОФайле.ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла = СведенияОФайле.ВремяИзменения;
	Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Версия.Размер = СведенияОФайле.Размер;
	Версия.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Версия.Комментарий = СведенияОФайле.Комментарий;
	
	Версия.Расширение = ФайловыеФункцииКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);
	
	ТипХраненияФайлов = ФайловыеФункции.ПолучитьТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;
	
	#Удаление
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ИспользоватьРазмещениеВТомахПоУсловиям() Тогда
		Версия.Записать(); // чтобы при размещении в томе по условию на руках была ссылка на версию
	КонецЕсли;		
	#КонецУдаления
	#Вставка 
	// + #s3 Иванов А.Б. 12.01.2021
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Версия.Записать(); // чтобы при размещении в томе по условию на руках была ссылка на версию
	КонецЕсли;		
	// - #s3 Иванов А.Б. 12.01.2021	
	#КонецВставки
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
	КонецЕсли;	
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла));
		
		Если Версия.Размер = 0 Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
			
			МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
			РазмерВМб = Версия.Размер / (1024 * 1024);
			РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
			
			Если Версия.Размер > МаксРазмерФайла Тогда
				ВызватьИсключение
					   СтрШаблон(
						 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
						 СведенияОФайле.ИмяБезРасширения, 
						 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
						 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
			КонецЕсли;
			
		КонецЕсли;
		
		// очистим поля
		Версия.ПутьКФайлу = "";
		Версия.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	Иначе // хранение на диске
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
		
		Если Версия.Размер = 0 Тогда
			Версия.Размер = ДвоичныеДанные.Размер();
			
			МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
			РазмерВМб = Версия.Размер / (1024 * 1024);
			РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
			
			Если Версия.Размер > МаксРазмерФайла Тогда
				ВызватьИсключение
					   СтрШаблон(
						 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
						 СведенияОФайле.ИмяБезРасширения, 
						 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
						 ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
			КонецЕсли;
			
		КонецЕсли;
		
		ПутьКФайлу = "";
		
		ФайлЗашифрован = Ложь;
		Если СведенияОФайле.Зашифрован <> Неопределено Тогда
			ФайлЗашифрован = СведенияОФайле.Зашифрован;
		КонецЕсли;
		
		// добавить в один из томов (где есть свободное место)
		ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, 
			СведенияОФайле.ВремяИзмененияУниверсальное, Версия.НомерВерсии, 
			СведенияОФайле.ИмяБезРасширения, Версия.Расширение, Версия.Размер, 
				ФайлЗашифрован, Неопределено, Версия.Ссылка);
		Версия.ПутьКФайлу = ПутьКФайлу;
		Версия.Том = СсылкаНаТом.Ссылка;
		ХранилищеФайла = Новый ХранилищеЗначения(""); // очистим ХранилищеЗначения
	КонецЕсли; // хранение на диске			
	
	Если СведенияОФайле.АдресВременногоХранилищаТекста <> Неопределено Тогда
		ИзвлекатьТекстыФайловНаСервере = ФайловыеФункции.ИзвлекатьТекстыФайловНаСервере();
		Если ИзвлекатьТекстыФайловНаСервере = Ложь Тогда
			
			Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
			Версия.ИзвлеченныйТекст = Новый ХранилищеЗначения(Текст);
			ФайловыеФункции.СформироватьРеквизитТекстХранилище(Версия);
			
		Иначе
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		КонецЕсли;
	Иначе
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
	Если СведенияОФайле.НовыйСтатусИзвлеченияТекста <> Неопределено Тогда
		Версия.СтатусИзвлеченияТекста = СведенияОФайле.НовыйСтатусИзвлеченияТекста;
	КонецЕсли;
	
	Если Версия.Размер = 0 Тогда
		ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
		Версия.Размер = ДвоичныеДанныеФайла.Размер();
	КонецЕсли;
	
	Если СведенияОФайле.Зашифрован <> Неопределено Тогда
		Версия.Зашифрован = СведенияОФайле.Зашифрован;
	КонецЕсли;    
	
	Версия.ДополнительныеСвойства.Вставить("ОбновитьРеквизитыВерсииВФайле", Истина); // чтобы прошла запись не-текущей версии
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);	
	КонецЕсли;	
	
	Если ВерсияЗаблокирована Тогда
		РазблокироватьДанныеДляРедактирования(Версия.Ссылка, УникальныйИдентификаторФормы);		
	КонецЕсли;
	
	ЗаписатьКодировкуВерсииФайла(Версия.Ссылка, КодировкаПредВерсии);
	
	НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(ФайлСсылка);
	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
	
	ЗаписатьОбращениеКВерсииФайла(Версия.Ссылка);
	
	ПротоколированиеРаботыПользователей.ЗаписатьИзменениеФайла(Версия.Владелец);
	
	Возврат Версия.Ссылка;

КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
// Делает ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку
// Параметры
// ВерсияСсылка - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка  - навигационная ссылка во временном хранилище
&ИзменениеИКонтроль("ПолучитьНавигационнуюСсылкуДляОткрытия")
Функция s3_ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы, ДополнительныеПараметры)
		
	Адрес = "";
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	
	Если ВерсияСсылка.ФайлУдален Тогда
		
		СтрокаОшибки = НСтр("ru='Эта версия файла является устаревшей и сейчас недоступна. 
			|Для получения доступа обратитесь к администратору системы.'");
		
		ВызватьИсключение СтрокаОшибки;
		
	КонецЕсли;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				#Удаление
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				#КонецУдаления
				#Вставка 
				// + #s3 Иванов А.Б. 12.01.2021
				ДвоичныеДанные = s3_API.ПолучитьДвоичныеДанныеФайла(ВерсияСсылка.Том, ПолныйПуть);                                                                        
				// - #s3 Иванов А.Б. 12.01.2021				
				#КонецВставки				
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ВерсияСсылка.Владелец, СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
					
			КонецПопытки;
		КонецЕсли;
	Иначе
		СтруктураКлюча = Новый Структура("Файл", ВерсияСсылка);
		КлючЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьКлючЗаписи(СтруктураКлюча);
		Адрес = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ДвоичныеДанныеФайла");
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЭкспортПапки")
		И ДополнительныеПараметры.ЭкспортПапки Тогда
		
		ПротоколированиеРаботыПользователей.ЗаписатьЭкспортФайлов(ВерсияСсылка.Владелец, ДополнительныеПараметры.ПолныйПуть);
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
&ИзменениеИКонтроль("СоздатьВерсию")
Функция s3_СоздатьВерсию(ФайлСсылка, СведенияОФайле)

	Перем СсылкаНаТом;
	ХранилищеФайла = Неопределено;

	УстановитьПривилегированныйРежим(Истина);

	ЗапретЗагрузкиФайловПоРасширению = ФайловыеФункции.ПолучитьЗапретЗагрузкиФайловПоРасширению();
	СписокЗапрещенныхРасширений = ФайловыеФункции.ПолучитьСписокЗапрещенныхРасширений();
	РасширениеФайла = СведенияОФайле.РасширениеБезТочки;
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		ВызватьИсключение
		СтрШаблон(
		НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
		РасширениеФайла);
	КонецЕсли;

	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();

	Если СведенияОФайле.НоваяВерсияНомерВерсии = Неопределено Тогда
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ФайлСсылка) + 1;
	Иначе
		Версия.НомерВерсии = СведенияОФайле.НоваяВерсияНомерВерсии;
	КонецЕсли;

	Версия.Владелец = ФайлСсылка;
	Версия.ДатаМодификацииУниверсальная = СведенияОФайле.ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла = СведенияОФайле.ВремяИзменения;

	Версия.Комментарий = СведенияОФайле.НоваяВерсияКомментарий;

	Если СведенияОФайле.НоваяВерсияАвтор = Неопределено Тогда
		Версия.Автор = Пользователи.ТекущийПользователь();
	Иначе
		Версия.Автор = СведенияОФайле.НоваяВерсияАвтор;
	КонецЕсли;

	Если СведенияОФайле.НоваяВерсияДатаСоздания = Неопределено Тогда
		Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		Версия.ДатаСоздания = СведенияОФайле.НоваяВерсияДатаСоздания;
	КонецЕсли;

	Версия.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Версия.Размер = СведенияОФайле.Размер;
	Версия.Расширение = ФайловыеФункцииКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);


	Если Версия.Размер <> 0 Тогда
		МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
		РазмерВМб = Версия.Размер / (1024 * 1024);
		РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);

		Если Версия.Размер > МаксРазмерФайла Тогда
			ВызватьИсключение
			СтрШаблон(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
			СведенияОФайле.ИмяБезРасширения, 
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
		КонецЕсли;
	КонецЕсли;

	ТипХраненияФайлов = ФайловыеФункции.ПолучитьТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;

	#Удаление
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ИспользоватьРазмещениеВТомахПоУсловиям() Тогда
		Версия.Записать(); // чтобы при размещении в томе по условию на руках была ссылка на версию
	КонецЕсли;		
	#КонецУдаления
	#Вставка 
	// + #s3 Иванов А.Б. 12.01.2021
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Версия.Записать(); // чтобы при размещении в томе по условию на руках была ссылка на версию
	КонецЕсли;		
	// - #s3 Иванов А.Б. 12.01.2021	
	#КонецВставки

	Если СведенияОФайле.СсылкаНаВерсиюИсточник <> Неопределено Тогда // создание Файла из шаблона

		ТипХраненияФайловШаблона = СведенияОФайле.СсылкаНаВерсиюИсточник.ТипХраненияФайла;

		Если ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			//  и шаблон, и новый Файл - в базе

			// При создании Файла из шаблона хранилище значения копируется напрямую
			ХранилищеФайла = СведенияОФайле.АдресВременногоХранилищаФайла;

		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			//  и шаблон, и новый Файл - на диске - просто копируем файл

			Если НЕ СведенияОФайле.СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ФайловыеФункции.ПолныйПутьТома(СведенияОФайле.СсылкаНаВерсиюИсточник.Том)
				+ СведенияОФайле.СсылкаНаВерсиюИсточник.ПутьКФайлу;

				ПутьКФайлу = "";

				// добавить в один из томов (где есть свободное место)
				ФайловыеФункции.ДобавитьНаДиск(ПолныйПутьФайлаШаблона, ПутьКФайлу, СсылкаНаТом, 
				СведенияОФайле.ВремяИзмененияУниверсальное,
				Версия.НомерВерсии, СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки, 
				Версия.Размер, Ложь, Неопределено, Версия.Ссылка);
				Версия.ПутьКФайлу = ПутьКФайлу;
				Версия.Том = СсылкаНаТом.Ссылка;
			КонецЕсли;

		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			// шаблон в базе, новый Файл - на диске

			ДвоичныеДанные = СведенияОФайле.АдресВременногоХранилищаФайла.Получить(); // в этом случае в АдресВременногоХранилищаФайла находится ХранилищеЗначения с файлом

			ПутьКФайлу = "";

			// добавить в один из томов (где есть свободное место)
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, 
			СведенияОФайле.ВремяИзмененияУниверсальное, 
			Версия.НомерВерсии, СведенияОФайле.ИмяБезРасширения, 
			СведенияОФайле.РасширениеБезТочки, Версия.Размер, Ложь, Неопределено, Версия.Ссылка);
			Версия.ПутьКФайлу = ПутьКФайлу;
			Версия.Том = СсылкаНаТом.Ссылка;

		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			// шаблон на диске, новый Файл - в базе

			Если НЕ СведенияОФайле.СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ФайловыеФункции.ПолныйПутьТома(СведенияОФайле.СсылкаНаВерсиюИсточник.Том)
				+ СведенияОФайле.СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				#Удаление
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаШаблона);
				#КонецУдаления
				#Вставка 
				// + #s3 Иванов А.Б. 23.03.21
				ДвоичныеДанные = s3_API.ПолучитьДвоичныеДанныеФайла(
					СведенияОФайле.СсылкаНаВерсиюИсточник.Том, ПолныйПутьФайлаШаблона);                                                                        
				// - #s3 Иванов А.Б. 23.03.21
				#КонецВставки
				ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			КонецЕсли;

		КонецЕсли;
	Иначе // создание объекта Файл на основе выбранного файла с диска

		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда

			ДвоичныеДанные = Неопределено;
			Если ЭтоАдресВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла) Тогда
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
			Иначе
				// в этом случае в АдресВременногоХранилищаФайла - путь к файлу на диске
				ДвоичныеДанные = Новый ДвоичныеДанные(СведенияОФайле.АдресВременногоХранилищаФайла);
			КонецЕсли;

			ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);

			Если Версия.Размер = 0 Тогда
				ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
				Версия.Размер = ДвоичныеДанныеФайла.Размер();

				МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
				РазмерВМб = Версия.Размер / (1024 * 1024);
				РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);

				Если Версия.Размер > МаксРазмерФайла Тогда
					ВызватьИсключение
					СтрШаблон(
					НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
					СведенияОФайле.ИмяБезРасширения, 
					ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
					ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
				КонецЕсли;

			КонецЕсли;

		Иначе // хранение на диске

			ДвоичныеДанные = Неопределено;
			Если ЭтоАдресВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла) Тогда
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
			Иначе
				// в этом случае в АдресВременногоХранилищаФайла - путь к файлу на диске
				ДвоичныеДанные = Новый ДвоичныеДанные(СведенияОФайле.АдресВременногоХранилищаФайла);
			КонецЕсли;

			Если Версия.Размер = 0 Тогда
				Версия.Размер = ДвоичныеДанные.Размер();

				МаксРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла();
				РазмерВМб = Версия.Размер / (1024 * 1024);
				РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);

				Если Версия.Размер > МаксРазмерФайла Тогда
					ВызватьИсключение
					СтрШаблон(
					НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
					СведенияОФайле.ИмяБезРасширения, 
					ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб), 
					ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
				КонецЕсли;
			КонецЕсли;

			ПутьКФайлу = "";

			// добавить в один из томов (где есть свободное место)
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, 
			СведенияОФайле.ВремяИзмененияУниверсальное, 
			Версия.НомерВерсии, СведенияОФайле.ИмяБезРасширения, СведенияОФайле.РасширениеБезТочки, 
			Версия.Размер, Ложь, Неопределено, Версия.Ссылка);
			Версия.ПутьКФайлу = ПутьКФайлу;
			Версия.Том = СсылкаНаТом.Ссылка;

		КонецЕсли; // хранение на диске			

	КонецЕсли;

	Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;

	Если ТипЗнч(СведенияОФайле.АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда

		// При создании Файла из шаблона хранилище значения копируется напрямую
		Версия.ТекстХранилище = СведенияОФайле.АдресВременногоХранилищаТекста;
		Версия.ИзвлеченныйТекст = Версия.ТекстХранилище; // здесь заполняем только ИзвлеченныйТекст
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;

	ИначеЕсли Не ПустаяСтрока(СведенияОФайле.АдресВременногоХранилищаТекста) Тогда

		Текст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
		Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		Версия.ИзвлеченныйТекст = Версия.ТекстХранилище; // здесь заполняем только ИзвлеченныйТекст
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;

	КонецЕсли;

	Если Версия.Размер = 0 Тогда
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	КонецЕсли;

	Версия.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НеНужноРаспознавать;

	Версия.Записать();

	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);	
	КонецЕсли;	

	ЗаписатьОбращениеКВерсииФайла(Версия.Ссылка);

	Возврат Версия.Ссылка;

КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
&ИзменениеИКонтроль("ПроверитьЦелостностьФайлов")
Функция s3_ПроверитьЦелостностьФайлов(ТаблицаФайловНаДиске, Том)

	Запрос = Новый Запрос;
	#Удаление
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу,
		|	ВерсииФайлов.Расширение,
		|	ВерсииФайлов.ПолноеНаименование КАК Наименование,
		|	ВерсииФайлов.Представление,
		|	ВерсииФайлов.Том,
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ВерсииФайлов.ДатаМодификацииФайла,
		|	ВерсииФайлов.Автор КАК Отредактировал
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
		|	И ВерсииФайлов.Том = &Том";
	#КонецУдаления
	#Вставка
	Запрос.Текст =		
	"ВЫБРАТЬ
	|	ВерсииФайлов.ПутьКФайлу,
	|	ВерсииФайлов.Расширение,
	|	ВерсииФайлов.ПолноеНаименование КАК Наименование,
	|	ВерсииФайлов.Представление,
	|	ВерсииФайлов.Том,
	// + #s3 Иванов А.Б. 12.01.2021
	|	ВерсииФайлов.Размер,                                                                        
	// - #s3 Иванов А.Б. 12.01.2021	
	|	ВерсииФайлов.Ссылка КАК Ссылка,
	|	ВерсииФайлов.ДатаМодификацииФайла,
	|	ВерсииФайлов.Автор КАК Отредактировал
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
	|	И ВерсииФайлов.Том = &Том";
	#КонецВставки

	Запрос.УстановитьПараметр("Том", Том);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		#Вставка 
		// + #s3 Иванов А.Б. 12.01.2021
		пЭтоТипХранилища_ОбъектноеS3 = s3_API.ЭтоТипХранилища_ОбъектноеS3(Выборка.Том);
		// - #s3 Иванов А.Б. 12.01.2021				
		#КонецВставки
		ВерсияСсылка = Выборка.Ссылка;

		Если ЗначениеЗаполнено(Выборка.ПутьКФайлу) И ЗначениеЗаполнено(Выборка.Том) Тогда

			ПолныйПутьФайла = ФайловыеФункцииСлужебный.ПолныйПутьТома(Выборка.Том) + Выборка.ПутьКФайлу; 
			Если Прав(ПолныйПутьФайла, 1) = "." Тогда
				ПолныйПутьФайла = Лев(ПолныйПутьФайла, СтрДлина(ПолныйПутьФайла) - 1);
			КонецЕсли;	
			
			#Вставка 
			// + #s3 Иванов А.Б. 12.01.2021
			СтрокаТаблицаФайловНаДиске = Неопределено;                                                                        
			// - #s3 Иванов А.Б. 12.01.2021			
			#КонецВставки
			СуществующийФайл = ТаблицаФайловНаДиске.НайтиСтроки(Новый Структура("ПолноеИмя",ПолныйПутьФайла));
			Если СуществующийФайл.Количество() = 0 Тогда

				НесуществующийФайл = ТаблицаФайловНаДиске.Добавить();
				НесуществующийФайл.СтатусПроверки = НСтр("ru = 'Отсутствуют данные в томе на диске'");
				НесуществующийФайл.Файл = ВерсияСсылка;
				НесуществующийФайл.Ссылка = ВерсияСсылка;
				НесуществующийФайл.ПолноеИмя = ПолныйПутьФайла;
				НесуществующийФайл.Расширение = ВерсияСсылка.Расширение;
				НесуществующийФайл.Имя = ВерсияСсылка.Наименование;
				НесуществующийФайл.Том = Том;
				НесуществующийФайл.Отредактировал = Выборка.Отредактировал;
				НесуществующийФайл.ДатаРедактирования = Выборка.ДатаМодификацииФайла;
				НесуществующийФайл.Количество = 1;
				
				#Вставка
				// + #s3 Иванов А.Б. 12.01.2021
				СтрокаТаблицаФайловНаДиске = НесуществующийФайл;
				СтрокаТаблицаФайловНаДиске.РазмерВ1с = Выборка.Размер;
				// - #s3 Иванов А.Б. 12.01.2021
				#КонецВставки
			Иначе	
				СуществующийФайл[0].Файл = ВерсияСсылка;
				#Удаление
				СуществующийФайл[0].СтатусПроверки = НСтр("ru = 'Целостные данные'");
				#КонецУдаления
				#Вставка
				// + #s3 Иванов А.Б. 12.01.2021
				СтрокаТаблицаФайловНаДиске = СуществующийФайл[0];                      
				
				Если Выборка.Размер = СтрокаТаблицаФайловНаДиске.РазмерВТомеХраненияФайлов Тогда
					СтрокаТаблицаФайловНаДиске.СтатусПроверки = НСтр("ru = 'Целостные данные'");	
				Иначе
					СтрокаТаблицаФайловНаДиске.СтатусПроверки = НСтр("ru = 'Отличается размер файлов в 1с и в томе хранения файлов'");
				КонецЕсли;
				СтрокаТаблицаФайловНаДиске.РазмерВ1с = Выборка.Размер;
				// - #s3 Иванов А.Б. 12.01.2021
				#КонецВставки
			КонецЕсли;
			
			#Вставка
			// + #s3 Иванов А.Б. 12.01.2021
			Если пЭтоТипХранилища_ОбъектноеS3 Тогда
				
				СтрокаТаблицаФайловНаДиске.Файл = ВерсияСсылка;
				СтрокаТаблицаФайловНаДиске.Ссылка = ВерсияСсылка;
				СтрокаТаблицаФайловНаДиске.Расширение = ВерсияСсылка.Расширение;
				СтрокаТаблицаФайловНаДиске.Том = Том;
				СтрокаТаблицаФайловНаДиске.Отредактировал = Выборка.Отредактировал;
				СтрокаТаблицаФайловНаДиске.ДатаРедактирования = Выборка.ДатаМодификацииФайла;
								
			КонецЕсли;
			// - #s3 Иванов А.Б. 12.01.2021			
			#КонецВставки
		КонецЕсли;

	КонецЦикла;

КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
&ИзменениеИКонтроль("ПереименоватьФайлВерсииНаДиске")
Процедура s3_ПереименоватьФайлВерсииНаДиске(Версия, СтароеНаименование, НовоеНаименование, УникальныйИдентификатор)

	Если НЕ Версия.Том.Пустая() Тогда
		#Вставка 
		// + #s3 Иванов А.Б. 12.01.2021
		Если s3_API.ЭтоТипХранилища_ОбъектноеS3(Версия.Том) Тогда
			//Для объектного S3 мы не изменяем уже полученный путь к файлу
			Возврат;
		КонецЕсли;
		// - #s3 Иванов А.Б. 12.01.2021
		#КонецВставки		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Версия, , УникальныйИдентификатор);
			ВерсияОбъект = Версия.ПолучитьОбъект();

			СтарыйПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 

			ФайлНаДиске = Новый Файл(СтарыйПолныйПуть);
			ПолныйПуть = ФайлНаДиске.Путь;
			ИмяБезРасширения = ФайлНаДиске.ИмяБезРасширения;
			Расширение = ФайлНаДиске.Расширение;
			НовоеИмяБезРасширения = СтрЗаменить(ИмяБезРасширения, СтароеНаименование, НовоеНаименование);

			НовыйПолныйПуть = ПолныйПуть + НовоеИмяБезРасширения + Расширение;
			ПолныйПутьКТому = ФайловыеФункции.ПолныйПутьТома(Версия.Том);
			НовыйЧастичныйПуть = Прав(НовыйПолныйПуть, СтрДлина(НовыйПолныйПуть) - СтрДлина(ПолныйПутьКТому));

			ПереместитьФайл(СтарыйПолныйПуть, НовыйПолныйПуть);
			ВерсияОбъект.ПутьКФайлу = НовыйЧастичныйПуть;
			ВерсияОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Версия, УникальныйИдентификатор);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры 
// - #s3 Иванов А.Б. 12.01.2021

// + #s3 Бадальян А.Б 20250626
&ИзменениеИКонтроль("ДанныеФайлаДляОткрытия")
Функция s3_ДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка = Неопределено, ИдентификаторФормы = Неопределено,
	РабочийКаталогВладельца = Неопределено, ПредыдущийАдресФайла = Неопределено,
	НеПолучатьВизуализациюЭП = Ложь) Экспорт
	
	Если ПредыдущийАдресФайла <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ПредыдущийАдресФайла) И ЭтоАдресВременногоХранилища(ПредыдущийАдресФайла) Тогда
			УдалитьИзВременногоХранилища(ПредыдущийАдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолноеИмяФайлаВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
	КонецЕсли;
	
	ПредыдущийАдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	ПротоколированиеРаботыПользователей.ЗаписатьПолучениеФайла(ДанныеФайла.Ссылка);
	
	ЗаписатьОбращениеКВерсииФайла(ДанныеФайла.Версия);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(ДанныеФайла.Ссылка);
	
	Если НеПолучатьВизуализациюЭП = Ложь Тогда
		
		ДобавитьВизуализациюЭП(ДанныеФайла, ИдентификаторФормы);
		
		Если ДанныеФайла.ВизуализацияЭПДобавлена = Истина Тогда
			
			ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = ""; // не берем из кеша
			УдалитьИзРегистра(ДанныеФайла.Версия); // удалим инфо из кеша
			
			Возврат ДанныеФайла;
		КонецЕсли;	
		
	Иначе	
		
		ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = ""; // не берем из кеша
		УдалитьИзРегистра(ДанныеФайла.Версия); // удалим инфо из кеша
		
	КонецЕсли;
	
	ТипХраненияФайла = ДанныеФайла.Версия.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Ссылка = &Версия";
		
		Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
		
		ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ДанныеФайлаПутьКФайлу = "";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеФайлаТом = Выборка.Том;
			ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
		КонецЕсли;
		
		Если НЕ ДанныеФайлаТом.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
			Попытка
				#Удаление
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				#КонецУдаления
				#Вставка 
				// + #s3 Иванов А.Б. 12.01.2021
				ДвоичныеДанные = s3_API.ПолучитьДвоичныеДанныеФайла(ДанныеФайлаТом, ПолныйПуть);
				// - #s3 Иванов А.Б. 12.01.2021				
				#КонецВставки
				// Работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия.
				ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// Запись в журнал регистрации.
				СсылкаНаФайл = ?(ФайлСсылка <> Неопределено, ФайлСсылка, ВерсияСсылка);
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), СсылкаНаФайл);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ФайлСсылка,
					СообщениеОбОшибке);
					
				ТипВладельцаФайла = ТипЗнч(ДанныеФайла.Владелец);
				Если ТипВладельцаФайла = Тип("СправочникСсылка.ПапкиФайлов") Тогда
					ПредставлениеВладельца = ПолныйПутьПапки(ДанныеФайла.Владелец);
				Иначе
					ПредставлениеВладельца = ДанныеФайла.Владелец;
				КонецЕсли;
				ПредставлениеВладельцаФайла = СтрШаблон(
					НСтр("ru = 'Присоединен к %1 : %2'"),
					Строка(ТипВладельцаФайла),
					ПредставлениеВладельца);
					
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение,
					,
					ПредставлениеВладельцаФайла);
					
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге) Тогда
		ОбновитьДатуОбращенияФайлыВРабочемКаталогеКомпьютера(ДанныеФайла.Версия);
	КонецЕсли;	
	
	ОбменСКонтрагентамиДОВызовСервера.ДополнитьДанныеФайлаДляОткрытияСведениямиЭДО(ДанныеФайла);
	
	Возврат ДанныеФайла;
	
КонецФункции // ДанныеФайлаДляОткрытия()
//- #s3 Бадальян А.Б 20250626

&ИзменениеИКонтроль("ДанныеФайлаИДвоичныеДанные")
Функция s3_ДанныеФайлаИДвоичныеДанные(ФайлСсылка, ВерсияСсылка, АдресПодписи, ИдентификаторФормы)

	ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;

	ДвоичныеДанные = Неопределено;

	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				#Удаление
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				#КонецУдаления
				#Вставка 
				// + #s3 Иванов А.Б. 12.01.2021
				ДвоичныеДанные = s3_API.ПолучитьДвоичныеДанныеФайла(ВерсияСсылка.Том, ПолныйПуть);			                                                                        
				// - #s3 Иванов А.Б. 12.01.2021
				#КонецВставки
			Исключение
				// Запись в журнал регистрации.
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
				ИнформацияОбОшибке(), ВерсияСсылка.Владелец);

				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Открытие файла'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Файлы,
				ВерсияСсылка.Владелец,
				СообщениеОбОшибке);

				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
	КонецЕсли;

	ДвоичныеДанныеПодписи = Неопределено;
	Если АдресПодписи <> Неопределено Тогда
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	КонецЕсли;

	Если ИдентификаторФормы <> Неопределено Тогда
		ДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;

	СтруктураВозврата = Новый Структура("ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи",
	ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи);

	Возврат СтруктураВозврата;
КонецФункции
